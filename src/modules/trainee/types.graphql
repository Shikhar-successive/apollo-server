input CreateUserInput {
  name: String!
  email: String!
  role: String!
  password: String!
  createdBy: String!
}

input pagination {
  skip: Int
  limit: Int
}

input UpdateUserInput {
  originalId: ID!
  name: String
  email: String
  role: String
  updatedBy: String!
}

input DeleteUserInput {
  originalId: ID!
}

type ResponseUser {
  status: String
  message: String
  data: Trainee
}

# union updateResponse = ResponseUser | updateError

type getAllType {
  status: String
  message: String
  data: Traineedata
}

type updateError {
  status: String
  message: String
  error: Error
}

type DeleteUser {
  status: String
  message: String
  data: DeleteData
}

type DeleteData {
  id: ID
}

type Traineedata {
  totalRecords: Int
  count: Int
  records: [Trainee]
}

type Trainee {
  _id: String
  name: String
  email: String
  role: String
  password: String
  createdAt: String
  originalId: String
}

type UpdatedUser {
    name: String
    email: String
    role: String
    password: String
    createdBy: String
    createdAt: String
    updatedBy: String
    updatedAt: String

}

type Error {
  name: String
  message: String
}